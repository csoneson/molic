// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "molic_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// any_true
bool any_true(std::vector<bool>& v);
RcppExport SEXP _molic_any_true(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<bool>& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(any_true(v));
    return rcpp_result_gen;
END_RCPP
}
// pairwise_comb
Rcpp::CharacterMatrix pairwise_comb(VS x);
RcppExport SEXP _molic_pairwise_comb(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VS >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise_comb(x));
    return rcpp_result_gen;
END_RCPP
}
// table_count
std::map<std::string, int> table_count(VS x);
RcppExport SEXP _molic_table_count(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VS >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(table_count(x));
    return rcpp_result_gen;
END_RCPP
}
// matpr
VS matpr(Rcpp::CharacterMatrix A);
RcppExport SEXP _molic_matpr(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(matpr(A));
    return rcpp_result_gen;
END_RCPP
}
// dfs
VS dfs(Rcpp::List adjList, std::string root);
RcppExport SEXP _molic_dfs(SEXP adjListSEXP, SEXP rootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type adjList(adjListSEXP);
    Rcpp::traits::input_parameter< std::string >::type root(rootSEXP);
    rcpp_result_gen = Rcpp::wrap(dfs(adjList, root));
    return rcpp_result_gen;
END_RCPP
}
// mcs
VS mcs(Rcpp::List adj);
RcppExport SEXP _molic_mcs(SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(mcs(adj));
    return rcpp_result_gen;
END_RCPP
}
// perfect_sequence
VVS perfect_sequence(Rcpp::List adj, VS z);
RcppExport SEXP _molic_perfect_sequence(SEXP adjSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< VS >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(perfect_sequence(adj, z));
    return rcpp_result_gen;
END_RCPP
}
// perfect_cliques
VVS perfect_cliques(VVS& x);
RcppExport SEXP _molic_perfect_cliques(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VVS& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(perfect_cliques(x));
    return rcpp_result_gen;
END_RCPP
}
// perfect_separators
Rcpp::List perfect_separators(VVS& x);
RcppExport SEXP _molic_perfect_separators(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VVS& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(perfect_separators(x));
    return rcpp_result_gen;
END_RCPP
}
// rip
Rcpp::List rip(Rcpp::List& adj);
RcppExport SEXP _molic_rip(SEXP adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type adj(adjSEXP);
    rcpp_result_gen = Rcpp::wrap(rip(adj));
    return rcpp_result_gen;
END_RCPP
}
// set_intersect
VS set_intersect(VS& v1, VS& v2);
RcppExport SEXP _molic_set_intersect(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VS& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< VS& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(set_intersect(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// set_union
VS set_union(VS& v1, VS& v2);
RcppExport SEXP _molic_set_union(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VS& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< VS& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(set_union(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// set_diff
VS set_diff(VS& v1, VS& v2);
RcppExport SEXP _molic_set_diff(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VS& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< VS& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(set_diff(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// set_eq
bool set_eq(VS& v1, VS& v2);
RcppExport SEXP _molic_set_eq(SEXP v1SEXP, SEXP v2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VS& >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< VS& >::type v2(v2SEXP);
    rcpp_result_gen = Rcpp::wrap(set_eq(v1, v2));
    return rcpp_result_gen;
END_RCPP
}
// is_subseteq
bool is_subseteq(VS const& a, VS const& b);
RcppExport SEXP _molic_is_subseteq(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< VS const& >::type a(aSEXP);
    Rcpp::traits::input_parameter< VS const& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(is_subseteq(a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_molic_any_true", (DL_FUNC) &_molic_any_true, 1},
    {"_molic_pairwise_comb", (DL_FUNC) &_molic_pairwise_comb, 1},
    {"_molic_table_count", (DL_FUNC) &_molic_table_count, 1},
    {"_molic_matpr", (DL_FUNC) &_molic_matpr, 1},
    {"_molic_dfs", (DL_FUNC) &_molic_dfs, 2},
    {"_molic_mcs", (DL_FUNC) &_molic_mcs, 1},
    {"_molic_perfect_sequence", (DL_FUNC) &_molic_perfect_sequence, 2},
    {"_molic_perfect_cliques", (DL_FUNC) &_molic_perfect_cliques, 1},
    {"_molic_perfect_separators", (DL_FUNC) &_molic_perfect_separators, 1},
    {"_molic_rip", (DL_FUNC) &_molic_rip, 1},
    {"_molic_set_intersect", (DL_FUNC) &_molic_set_intersect, 2},
    {"_molic_set_union", (DL_FUNC) &_molic_set_union, 2},
    {"_molic_set_diff", (DL_FUNC) &_molic_set_diff, 2},
    {"_molic_set_eq", (DL_FUNC) &_molic_set_eq, 2},
    {"_molic_is_subseteq", (DL_FUNC) &_molic_is_subseteq, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_molic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
