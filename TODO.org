#+STARTUP: showall

* Todo stop criteria
 - Make a document that benchmark the three approaches on various datasets!!!
   + IS IT ALWAYS BETTER TO HAVE MORE EDGES FOR PREDICTING?
   + FIND A WAY TO BENCHMARK A TRUE GRAPH
     * Simulate using sim_Y !
   + Fit the graph that Edwards fit?

* Todo Cpp (containers)
 - use unordered_set for the cliques and separators
   + No sorting required then!
   + THEREFOR IMPLEMENT THIS IN THE RIP FUNCTION ALSO!!!
 - Use a graph class as in already in the src folder
 - Also use a efs class with members
   + the graph class
   + adj
   + ht
   + CG
   + etc...

* Todo Cpp
 - [ ] Use adjacency lists in ~efs_step~
 - [ ] Make it independent of ~igraph~
   * That is, use ~dfs~ and adj lists
   * Removal of nodes can be done by traversing adj - slow?
 - [ ] Let G_A and GC_A be logical matrices!
 - [ ] In ad_adj - REMOVE as.logical!
 - [ ] Implement as_mat and
 - [X] Implement as_adj (R version)

* Todo Outliers [8/15]
 - [ ] In outlier_model handle na_b when names in b are longer than one char!
   + Just assumme or convert these!
 - [ ] Benchmark the two mdl approaches and AIC;
   + how many false edges (edges between haps especially)
   + in how many component/haps are all SNPs included; take into account the independent singletons.
 - [ ] Implement outlier_test function
 - [ ] Sensitivity analysis of paramter ~d~ in efs
 - [ ] Benchmark speed to Altmueller on the same datasets
 - [ ] Implement backward search and update eligibles accordingly
 - [X] Implement new marginal table function
 - [X] Implement new slice function
 - [X] Handle empty separators
 - [X] Run the outlier_model on ONE graph - so ONLY 10.000 simulations are needed.
 - [X] Implement for parrallel for both Windows and Linux! library(parallel) ?
 - [X] Implement that the union of componentlist into a single graph
 - [X] Redesign maximum cardinality to input the neighbor matrix G_A
 - [X] The new neighborhood function is easy implementet with G_A

* COMPREX (Another outlierdetection method for discrete data)
 - https://github.com/HamedMP/CompreX
 - http://eda.mmci.uni-saarland.de/pubs/

* STRUCTURE
 - https://web.stanford.edu/group/pritchardlab/structure_software/release_versions/v2.3.4/html/structure.html
 - https://youtu.be/YdN2bWG5ZZs
 - https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3665925/
